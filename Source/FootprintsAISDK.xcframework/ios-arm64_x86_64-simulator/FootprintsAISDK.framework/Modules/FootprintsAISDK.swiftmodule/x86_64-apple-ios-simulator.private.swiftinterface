// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FootprintsAISDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import CoreLocation
@_exported import FootprintsAISDK
import Foundation
import SQLite3
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NetworkManagerDelegate : AnyObject {
  func didReceiveSuccessResponse(message: Swift.String)
  func didReceiveFailureResponse(error: FootprintsAISDK.NetworkError)
}
public enum NetworkError : Swift.Error {
  case noInternetConnection
  case invalidBaseUrl
  case invalidApiKey
  case invalidEndpoint
  case decodingError
  case serverError(Swift.String)
  case unknownError
  case authenticationFailure
}
@_hasMissingDesignatedInitializers public class NetworkManager {
  public static let shared: FootprintsAISDK.NetworkManager
  weak public var delegate: (any FootprintsAISDK.NetworkManagerDelegate)?
  public func setBaseUrlAndAppKey(_ url: Swift.String, AppKey: Swift.String)
  public func sendRequest<T>(endpoint: Swift.String, method: Swift.String = "POST", parameters: [Swift.String : Any] = [:], contentType: Swift.String = "application/json", retries: Swift.Int = 0, responseType: T.Type, completion: @escaping (Swift.Result<T, FootprintsAISDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
public protocol AppTrackingAuthorizationDelegate : AnyObject {
  func didFetchIDFA(idfa: Swift.String)
  func didFailToFetchIDFA(reason: Swift.String)
}
public enum TrackingAuthorizationStatus {
  case authorized
  case denied
  case restricted
  case notDetermined
  case unknown
  public static func == (a: FootprintsAISDK.TrackingAuthorizationStatus, b: FootprintsAISDK.TrackingAuthorizationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppTrackingAuthorization {
  public static let shared: FootprintsAISDK.AppTrackingAuthorization
  weak public var delegate: (any FootprintsAISDK.AppTrackingAuthorizationDelegate)?
  public func setTrackingPermissionStatus(status: FootprintsAISDK.TrackingAuthorizationStatus)
  @objc deinit
}
public struct ContentDeliveryFailureResponse {
}
public struct LocationResponse {
  public let status: Swift.Bool
  public let message: Swift.String
  public let data: Swift.String?
}
public struct LocationErrorResponse {
}
public struct SendGeoLocationResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct InitAppResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct SendAdditionalDataResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum LocationError : Swift.Error {
  case permissionDenied
  case permissionRestricted
  case locationNotDetermined
  case locationUpdateFailed(Swift.String)
  case unknownAuthorizationStatus
  case authenticationFailed
  case databaseInsertFailed(Swift.String)
  case databaseFetchFailed(Swift.String)
  public var localizedDescription: Swift.String {
    get
  }
}
public protocol LocationManagerDelegate : AnyObject {
  func didUpdateLocation(_ response: FootprintsAISDK.LocationResponse)
  func didFailWithError(_ errorResponse: FootprintsAISDK.LocationErrorResponse)
  func didSendGeoLocationSuccess(response: FootprintsAISDK.LocationResponse)
  func didSendGeoLocationFailure(error: FootprintsAISDK.LocationErrorResponse)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public static let shared: FootprintsAISDK.LocationManager
  weak public var delegate: (any FootprintsAISDK.LocationManagerDelegate)?
  public func setCredentials(apiKey: Swift.String)
  public func requestPermissions()
  public func fetchLocationOnce()
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  public func sendGeoLocation(latitude: Swift.Double, longitude: Swift.Double, accuracy: Swift.Double)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  @objc deinit
}
public enum DatabaseError : Swift.Error {
  case executionFailed(Swift.String)
  case queryFailed(Swift.String)
  case databaseNotOpened(Swift.String)
}
public protocol DatabaseHelperDelegate : AnyObject {
  func didInitializeDatabase(initDbData: [Swift.String : Any])
  func didInsertLocationData(insertDbData: [Swift.String : Any])
  func didFetchLocationData(fetchDbData: [Swift.String : Any])
  func didDeleteDb(deleteDbData: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class DatabaseHelper {
  public static let shared: FootprintsAISDK.DatabaseHelper
  weak public var delegate: (any FootprintsAISDK.DatabaseHelperDelegate)?
  public func fetchLocationData()
  public func insertLocationData(latitude: Swift.Double, longitude: Swift.Double, accuracy: Swift.Double, altitude: Swift.Double, altitudeAccuracy: Swift.Double, heading: Swift.Double, speed: Swift.Double, timestamp: Swift.Double)
  public func deleteLocationData(by id: Swift.Int) throws
  public func deleteDatabase() throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DatabaseQuery {
  public static let locationDataTable: Swift.String
  public static let createTable: Swift.String
  public static let fetchAll: Swift.String
  public static let insert: Swift.String
  public static let deleteByID: Swift.String
  public static func checkTableExistsQuery(for tableName: Swift.String) -> Swift.String
  public static let databaseInitializedMessage: Swift.String
  public static let clientValidationFailedMessage: Swift.String
  public static let databaseOpenFailedMessage: Swift.String
  public static let queryPreparationFailedMessage: Swift.String
  public static let queryExecutionFailedMessage: Swift.String
  public static let locationFetchFailedMessage: Swift.String
  public static let locationFetchSuccessMessage: Swift.String
  public static let insertLocationFailedMessage: Swift.String
  public static let insertLocationSuccessMessage: Swift.String
  public static let deleteQueryFailedMessage: Swift.String
  public static let locationDeleteFailedMessage: Swift.String
  public static let databasePathNotFoundMessage: Swift.String
  public static let databaseDeleteSuccessMessage: Swift.String
  public static let databaseDeleteFailedMessage: Swift.String
  public static let databaseNotFoundMessage: Swift.String
  @objc deinit
}
public struct ContentDelivaryResponse : Swift.Codable {
  public let success: Swift.Bool
  public let mobileID: Swift.String
  public let data: FootprintsAISDK.DataClass
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case success
    case mobileID
    case data
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataClass : Swift.Codable {
  public let videoAdHorizontalVideo: [FootprintsAISDK.DisplayAd], videoAdVerticalVideo: [FootprintsAISDK.DisplayAd]
  public let leadAd: [Swift.String], productAd: [Swift.String], mobileNotifications: [Swift.String]
  public let displayAd: [FootprintsAISDK.DisplayAd]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DisplayAd : Swift.Codable {
  public let adType: Swift.String, adID: Swift.String, title: Swift.String, campaignName: Swift.String
  public let topMessage: Swift.String, contentType: Swift.String
  public let contentURL: Swift.String
  public let bottomMessage: Swift.String, buttonText: Swift.String, publishDate: Swift.String, expirationDate: Swift.String
  public let campaignID: Swift.String
  public let linkURL: Swift.String
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case adType
    case adID
    case title, campaignName, topMessage, contentType
    case contentURL
    case bottomMessage, buttonText, publishDate, expirationDate
    case campaignID
    case linkURL
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol NetworkViewModelDelegate : AnyObject {
  func didReceiveInitAppSuccess(initSuccessData: [Swift.String : Any])
  func didReceiveInitAppFailure(initFailureData: [Swift.String : Any])
  func didSendContentDelivarySuccess(response: FootprintsAISDK.ContentDelivaryResponse)
  func didSendContentDelivaryFailure(error: FootprintsAISDK.ContentDeliveryFailureResponse)
  func didSendAdditionalDataSuccess(response: FootprintsAISDK.SendAdditionalDataResponse)
  func didSendAdditionalDataFailure(error: FootprintsAISDK.NetworkError)
}
@_hasMissingDesignatedInitializers public class NetworkViewModel {
  public static let shared: FootprintsAISDK.NetworkViewModel
  weak public var delegate: (any FootprintsAISDK.NetworkViewModelDelegate)?
  public func initializeTracking(apiKey: Swift.String)
  public func sendGeoLocation(parameters: [Swift.String : Any], completion: @escaping (Swift.Result<Swift.Bool, FootprintsAISDK.NetworkError>) -> Swift.Void)
  public func sendContentDelivery(parameters: [Swift.String : Any])
  public func getContentDelivery()
  public func sendAdditionalData(parameters: [Swift.String : Any])
  public func getAdditionalData(campaignId: Swift.String, reqType: Swift.String)
  public func sendImpressionData(campaignId: Swift.String, reqType: Swift.String, adId: Swift.String)
  @objc deinit
}
extension FootprintsAISDK.TrackingAuthorizationStatus : Swift.Equatable {}
extension FootprintsAISDK.TrackingAuthorizationStatus : Swift.Hashable {}
extension FootprintsAISDK.ContentDelivaryResponse.CodingKeys : Swift.Equatable {}
extension FootprintsAISDK.ContentDelivaryResponse.CodingKeys : Swift.Hashable {}
extension FootprintsAISDK.ContentDelivaryResponse.CodingKeys : Swift.RawRepresentable {}
extension FootprintsAISDK.DisplayAd.CodingKeys : Swift.Equatable {}
extension FootprintsAISDK.DisplayAd.CodingKeys : Swift.Hashable {}
extension FootprintsAISDK.DisplayAd.CodingKeys : Swift.RawRepresentable {}
